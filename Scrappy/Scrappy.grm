"Name"     = 'Scrappy'
"Author"   = 'Tomáš Linhart'
"Version"  = '0.1'
"About"    = 'A short description of the grammar'

"Start Symbol" = <Start>

! -------------------------------------------------
! Character Sets
! -------------------------------------------------

{WS}           = {Whitespace} - {CR} - {LF}
{ID Head}      = {Letter} + [_]
{ID Tail}      = {Alphanumeric} + [_]
{String Chars} = {Printable} + {HT} - ["]

! -------------------------------------------------
! Terminals
! -------------------------------------------------

! The following defines the Whitespace terminal using the {WS}
! set - which excludes the carriage return and line feed 
! characters

Whitespace    = {WS}+
NewLine       = {CR}{LF} | {CR} | {LF}

Identifier    = {ID Head}{ID Tail}*

! Literals

IntegerLiteral = {Digit}+
FloatLiteral = {Digit}*'.'{Digit}+([Ee][+-]?{Digit}+)?

StringLiteral = '"' {String Chars}* '"'

BoolLiteral = 'YES' | 'NO'

! Comments
              
Comment Line = '--'
             
Comment Start = '(--'
Comment End   = '--)'

! -------------------------------------------------
! Rules
! -------------------------------------------------

! The following rule defines a series of newline tokens.
! Use this rule rather than the newline terminal.

<nl>     ::= NewLine <nl>          !One or more
          |  NewLine

<nl Opt> ::= NewLine <nl Opt>      !Zero or more
          | !Empty

! <nl opt> removes blank lines before first statement

<Start>   ::= <nl opt> <Program>

<Program> ::= <ModuleList>

<ModuleList> ::= <Module> <ModuleList>
             |
           
<Module> ::= 'module' Identifier <nl> <ClassList> 'end' <nl>
          
! Classes

<ClassList> ::= <Class> <ClassList>
             | 
             
<Class> ::= 'class' Identifier <nl> <PropertyList> <MethodList> 'end' <nl>

<Type> ::= Identifier
        | Identifier '[' <Type> ']'

! Properties

<PropertyList> ::= <Property> <PropertyList>
                |
                
<Property> ::= '@' Identifier ':' <Type> <nl>

! Methods

<MethodList> ::= <Method> <MethodList>
              |
              
<Method> ::= 'def' Identifier '(' <ArgumentList> ')' ':' <Type> <nl> <Block> 'end' <nl>

! Arguments

<ArgumentList> ::= <Argument> ',' <ArgumentList>
              | <Argument>
              |

<Argument> ::= Identifier ':' <Type>

! Block

<Block> ::= <StatementList>
         
<StatementList> ::= <Statement> <StatementList>
                 |
     
<Statement> ::= 'return' <Expression> <nl>
             | <Assignable> '=' <Expression> <nl>
             | 'let' Identifier ':' <Type> '=' <Expression> <nl>
             |  <Expression> <nl>

<Assignable> ::= <Expression> '@' Identifier
              | '@' Identifier ! Property
              | Identifier ! Local variable
              
<Literal> ::= IntegerLiteral
           | FloatLiteral
           | StringLiteral
           | BoolLiteral

<Expression> ::= <Expression> '@' Identifier
              | <Expression> '#' Identifier '(' <ParameterList> ')'
              | '@' Identifier ! Property
              | Identifier ! Local variable
              | <Literal>
                            
<ParameterList> ::= <Parameter> ',' <ParameterList>
              | <Parameter>
              |

<Parameter> ::= <Expression>
                     

!<Expression>  ::= <Expression> '>'  <Add Exp> 
!               |  <Expression> '<'  <Add Exp> 
!               |  <Expression> '<=' <Add Exp> 
!               |  <Expression> '>=' <Add Exp>
!               |  <Expression> '==' <Add Exp>    !Equal
!               |  <Expression> '<>' <Add Exp>    !Not equal
!               |  <Add Exp> 

!<Add Exp>     ::= <Add Exp> '+' <Mult Exp>
!               |  <Add Exp> '-' <Mult Exp>
!               |  <Mult Exp> 

!<Mult Exp>    ::= <Mult Exp> '*' <Negate Exp> 
!               |  <Mult Exp> '/' <Negate Exp> 
!               |  <Negate Exp> 

!<Negate Exp>  ::= '-' <Value> 
!               |  <Value> 

!Add more values to the rule below - as needed

!<Value>       ::= Identifier
!               |  '(' <Expression> ')'
