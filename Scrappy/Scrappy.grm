"Name"     = 'Scrappy'
"Author"   = 'Tomáš Linhart'
"Version"  = '0.1'
"About"    = 'A short description of the grammar'

"Start Symbol" = <Start>

! -------------------------------------------------
! Character Sets
! -------------------------------------------------

{WS}           = {Whitespace} - {CR} - {LF}
{ID Head}      = {Letter} + [_]
{ID Tail}      = {Alphanumeric} + [_]
{String Chars} = {Printable} + {HT} - ["]

! -------------------------------------------------
! Terminals
! -------------------------------------------------

! The following defines the Whitespace terminal using the {WS}
! set - which excludes the carriage return and line feed 
! characters

Whitespace    = {WS}+
NewLine       = {CR}{LF} | {CR} | {LF}

Identifier    = {ID Head}{ID Tail}*

! Literals

IntegerLiteral = {Digit}+
FloatLiteral = {Digit}*'.'{Digit}+([Ee][+-]?{Digit}+)?

StringLiteral = '"' {String Chars}* '"'

BoolLiteral = 'YES' | 'NO'

! Comments
              
Comment Line = '--'
             
Comment Start = '(--'
Comment End   = '--)'

! -------------------------------------------------
! Rules
! -------------------------------------------------

! The following rule defines a series of newline tokens.
! Use this rule rather than the newline terminal.

<nl>     ::= NewLine <nl>          !One or more
          |  NewLine

<nl Opt> ::= NewLine <nl Opt>      !Zero or more
          |  !Empty

! <nl opt> removes blank lines before first statement

<Start>   ::= <nl opt> <Program>

<Program> ::= <ModuleList>

<ModuleList> ::= <Module> <ModuleList>
              |  
           
<Module> ::= 'module' Identifier <nl> <ImportList> <ClassList> 'end' <nl>

          
<ImportList> ::= <Import> <ImportList>
                |  

<Import> ::= 'import' Identifier <nl>

! Classes

<ClassList> ::= <Class> <ClassList>
             |  
             
<Class> ::= 'class' Identifier <nl> <PropertyList> <MethodList> 'end' <nl>

<Type> ::= Identifier
        |  Identifier '[' <Type> ']'

! Properties

<PropertyList> ::= <Property> <PropertyList>
                |  
                
<Property> ::= '@' Identifier ':' <Type> <nl>

! Methods

<MethodList> ::= <Method> <MethodList>
              |  
              
<Method> ::= 'def' Identifier '(' <ArgumentList> ')' ':' <Type> <nl> <Block> 'end' <nl>

! Arguments

<ArgumentList> ::= <Argument> ',' <ArgumentList>
                |  <Argument>
                |  

<Argument> ::= Identifier ':' <Type>

! Block

<Block> ::= <StatementList>
         
<StatementList> ::= <Statement> <StatementList>
                 |  
     
<Statement> ::= 'return' <Expression> <nl>
             | 'return' <nl>
             | 'emit' StringLiteral <nl>
             |  <Assignable> '=' <Expression> <nl>
             |  'let' Identifier ':' <Type> '=' <Expression> <nl>
             |  <Expression> <nl>
             |  'if' '(' <Expression> ')' <nl> <Block> 'end' <nl>
             |  'if' '(' <Expression> ')' <nl> <Block> 'else' <nl> <Block> 'end' <nl>
             |  'while' '(' <Expression> ')' <nl> <Block> 'end' <nl>

<Assignable> ::= <ObjectExpression> '@' Identifier
              |  '@' Identifier ! Property
              |  Identifier ! Local variable or Static
              
<Literal> ::= IntegerLiteral
           |  FloatLiteral
           |  StringLiteral
           |  BoolLiteral

<Expression> ::= <OrExpression>
              
<OrExpression> ::= <OrExpression> '||' <AndExpression>
                |  <AndExpression>

<AndExpression> ::= <AndExpression> '&&' <EqualityExpression>
                 |  <EqualityExpression>
        
<EqualityExpression> ::= <EqualityExpression> '==' <CompareExpression>
                      |  <EqualityExpression> '!=' <CompareExpression>
                      |  <CompareExpression>

<CompareExpression> ::= <CompareExpression> '<'  <ShiftExpression>
                     |  <CompareExpression> '>'  <ShiftExpression>
                     |  <CompareExpression> '<=' <ShiftExpression>
                     |  <CompareExpression> '>=' <ShiftExpression>
                     |  <ShiftExpression>
        
<ShiftExpression> ::= <ShiftExpression> '<<' <AdditionExpression>
                   |  <ShiftExpression> '>>' <AdditionExpression>
                   |  <AdditionExpression>

<AdditionExpression> ::= <AdditionExpression> '+' <MultplicationExpression>
                      |  <AdditionExpression> '-' <MultplicationExpression>
                      |  <MultplicationExpression>

<MultplicationExpression> ::= <MultplicationExpression> '*' <UnaryExpression>  
                           |  <MultplicationExpression> '/' <UnaryExpression>
                           |  <MultplicationExpression> '%' <UnaryExpression>
                           |  <UnaryExpression>

<UnaryExpression> ::= '!' <UnaryExpression>
                   |  '-' <UnaryExpression>
                   |  '(' <Type> ')' <ObjectExpression>
                   |  <ObjectExpression>

<ObjectExpression> ::= <ObjectExpression> '#' Identifier '(' <ParameterList> ')'
                    |  <ObjectExpression> '@' Identifier
                    |  '@' Identifier ! Property
                    |  Identifier '(' <ParameterList> ')'
                    |  Identifier '[' <Type> ']'
                    |  Identifier ! Local variable or Static
                    |  <Literal>
                            
<ParameterList> ::= <Parameter> ',' <ParameterList>
                 |  <Parameter>
                 |  

<Parameter> ::= <Expression>
                    

