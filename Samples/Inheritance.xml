<?xml version="1.0" encoding="utf-8" ?>
<classes>
	<class name="A" parentName="Any">
		<fields>
		</fields>
		<methods>
			<method name="Test::0" type="String">
				<args>
				</args>
				<locals>
					<local name="$__tmp" type="Any" />
				</locals>
				<instructions>
					<instruction>newstring #A</instruction> <!-- Line: 5 return "A" -->
					<instruction>vreturn</instruction> <!-- Line: 5 return "A" -->
				</instructions>
			</method>
		</methods>
	</class>
	<class name="B" parentName="A">
		<fields>
		</fields>
		<methods>
			<method name="Test::0" type="String">
				<args>
				</args>
				<locals>
					<local name="$__tmp" type="Any" />
				</locals>
				<instructions>
					<instruction>newstring #B</instruction> <!-- Line: 11 return "B" -->
					<instruction>vreturn</instruction> <!-- Line: 11 return "B" -->
				</instructions>
			</method>
			<method name="MyTest::0" type="String">
				<args>
				</args>
				<locals>
					<local name="$__tmp" type="Any" />
				</locals>
				<instructions>
					<instruction>vload 0</instruction> <!-- Line: 15 return parent::Test() - loading self -->
					<instruction>invokevirtual A::Test:0</instruction> <!-- Line: 15 return parent::Test() - doing method call -->
					<instruction>vreturn</instruction> <!-- Line: 15 return parent::Test() -->
				</instructions>
			</method>
			<method name="SecondTest::0" type="String">
				<args>
				</args>
				<locals>
					<local name="$__tmp" type="Any" />
				</locals>
				<instructions>
					<instruction>vload 0</instruction> <!-- Line: 19 return A::Test() - loading self -->
					<instruction>invokevirtual A::Test:0</instruction> <!-- Line: 19 return A::Test() - doing method call -->
					<instruction>vreturn</instruction> <!-- Line: 19 return A::Test() -->
				</instructions>
			</method>
		</methods>
	</class>
	<class name="EntryPoint" parentName="Any">
		<fields>
		</fields>
		<methods>
			<method name="Entry::1" type="Unit">
				<args>
					<arg name="args" type="Array" />
				</args>
				<locals>
					<local name="b" type="B" />
					<local name="a" type="A" />
					<local name="$__tmp" type="Any" />
				</locals>
				<instructions>
					<instruction>new B</instruction> <!-- Line: 26 let b : B = B#New() - creating new instance -->
					<instruction>vstore 4</instruction> <!-- Line: 26 let b : B = B#New() - storing in tmp variable -->
					<instruction>vload 4</instruction> <!-- Line: 26 let b : B = B#New() - loading from tmp variable -->
					<instruction>invokevirtual ::New::0</instruction> <!-- Line: 26 let b : B = B#New() - doing method call -->
					<instruction>vload 4</instruction> <!-- Line: 26 let b : B = B#New() - loading from tmp variable -->
					<instruction>vstore 2</instruction> <!-- Line: 26 let b : B = B#New() -->
					<instruction>vload 2</instruction> <!-- Line: 27 b#Test() -->
					<instruction>invokevirtual ::Test::0</instruction> <!-- Line: 27 b#Test() - doing method call -->
					<instruction>syscall 1</instruction> <!-- Line: 28 emit "syscall 1" // print  string -->
					<instruction>vload 2</instruction> <!-- Line: 29 b#MyTest() -->
					<instruction>invokevirtual ::MyTest::0</instruction> <!-- Line: 29 b#MyTest() - doing method call -->
					<instruction>syscall 1</instruction> <!-- Line: 30 emit "syscall 1" // print  string -->
					<instruction>vload 2</instruction> <!-- Line: 31 b#SecondTest() -->
					<instruction>invokevirtual ::SecondTest::0</instruction> <!-- Line: 31 b#SecondTest() - doing method call -->
					<instruction>syscall 1</instruction> <!-- Line: 32 emit "syscall 1" // print  string -->
					<instruction>new A</instruction> <!-- Line: 33 let a : A = A#New() - creating new instance -->
					<instruction>vstore 4</instruction> <!-- Line: 33 let a : A = A#New() - storing in tmp variable -->
					<instruction>vload 4</instruction> <!-- Line: 33 let a : A = A#New() - loading from tmp variable -->
					<instruction>invokevirtual ::New::0</instruction> <!-- Line: 33 let a : A = A#New() - doing method call -->
					<instruction>vload 4</instruction> <!-- Line: 33 let a : A = A#New() - loading from tmp variable -->
					<instruction>vstore 3</instruction> <!-- Line: 33 let a : A = A#New() -->
					<instruction>vload 2</instruction> <!-- Line: 34 a = b -->
					<instruction>vstore 3</instruction> <!-- Line: 34 a = b - assigning variable -->
					<instruction>vload 3</instruction> <!-- Line: 35 a#Test() -->
					<instruction>invokevirtual ::Test::0</instruction> <!-- Line: 35 a#Test() - doing method call -->
					<instruction>syscall 1</instruction> <!-- Line: 36 emit "syscall 1" // print  string -->
					<instruction>return</instruction> <!-- Added by compiler -->
				</instructions>
			</method>
		</methods>
	</class>
</classes>
